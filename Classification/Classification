{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lab 2 - Classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Assignment 1.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "import csv\n",
    " \n",
    "df1 = pd.read_csv(\"exp1a.csv\")\n",
    "df2 = pd.read_csv(\"exp1b.csv\")\n",
    "df3 = pd.read_csv(\"exp1c.csv\")\n",
    "\n",
    "x_plot1 = df1['x']\n",
    "y_plot1 = df1['y']\n",
    "data1 = df1[['x','y']]\n",
    "target1 = df1['class']\n",
    "\n",
    "x_plot2 = df2['x']\n",
    "y_plot2 = df2['y']\n",
    "data2 = df2[['x','y']]\n",
    "target2 = df2['class']\n",
    "\n",
    "x_plot3 = df3['x']\n",
    "y_plot3 = df3['y']\n",
    "data3 = df3[['x','y']]\n",
    "target3 = df3['class']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.1 (a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.scatter(x_plot1, y_plot1, c=target1)\n",
    "plt.show()\n",
    "plt.scatter(x_plot2, y_plot2, c=target2)\n",
    "plt.show()\n",
    "plt.scatter(x_plot3, y_plot3, c=target3)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.1(b,c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Results for k=1\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.977\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[194   6]\n",
      " [  3 197]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=5\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.952\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[183  17]\n",
      " [  2 198]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=11\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.942\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[177  23]\n",
      " [  0 200]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=21\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.928\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[171  29]\n",
      " [  0 200]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import cross_val_predict\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "k1 = {}\n",
    "score1 = {}\n",
    "j = 0\n",
    "\n",
    "\n",
    "k = [1,5,11,21]\n",
    "\n",
    "\n",
    "for i in k:\n",
    "    NNi = KNeighborsClassifier(n_neighbors=i);\n",
    "    \n",
    "    \n",
    "    cvi_scoresA = cross_val_score(NNi, data1, target1, cv=10)\n",
    "    \n",
    "    y_predAi = cross_val_predict(NNi, data1, target1, cv=10)\n",
    "    confusAi = confusion_matrix(target1, y_predAi)\n",
    "    \n",
    "    print('\\033[1m'+'\\033[4m')\n",
    "    print(\"Results for k={}\".format(i))\n",
    "    print('\\033[0m'+'\\033[1m')\n",
    "    print('CV Mean:')\n",
    "    print('\\033[0m')\n",
    "    print(round(np.mean(cvi_scoresA),3))\n",
    "    print('\\033[1m'+'Confusion Matrix')\n",
    "    print('\\033[0m')\n",
    "    print(confusAi)\n",
    "    \n",
    "    k1[j] = k[j]\n",
    "    score1[j] = np.mean(cvi_scoresA)\n",
    "    j = j+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Results for k=1\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.96\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[193   7]\n",
      " [  5  95]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=5\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.967\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[194   6]\n",
      " [  4  96]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=11\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.947\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[190  10]\n",
      " [  6  94]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=21\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.94\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[190  10]\n",
      " [  8  92]]\n"
     ]
    }
   ],
   "source": [
    "k2 = {}\n",
    "score2 = {}\n",
    "j = 0\n",
    "\n",
    "for i in k:\n",
    "    NNi = KNeighborsClassifier(n_neighbors=i);\n",
    "    \n",
    "    \n",
    "    cvi_scoresB = cross_val_score(NNi, data2, target2, cv=10)\n",
    "    \n",
    "    y_predBi = cross_val_predict(NNi, data2, target2, cv=10)\n",
    "    confusBi = confusion_matrix(target2, y_predBi)\n",
    "    \n",
    "    print('\\033[1m'+'\\033[4m')\n",
    "    print(\"Results for k={}\".format(i))\n",
    "    print('\\033[0m'+'\\033[1m')\n",
    "    print('CV Mean:')\n",
    "    print('\\033[0m')\n",
    "    print(round(np.mean(cvi_scoresB),3))\n",
    "    print('\\033[1m'+'Confusion Matrix')\n",
    "    print('\\033[0m')\n",
    "    print(confusBi)\n",
    "    k2[j] = k[j]\n",
    "    score2[j] = np.mean(cvi_scoresB)\n",
    "    j = j+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Results for k=1\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.941\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[194   6]\n",
      " [  7  13]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=5\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.977\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[200   0]\n",
      " [  5  15]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=11\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.945\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[200   0]\n",
      " [ 12   8]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=21\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.936\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[200   0]\n",
      " [ 14   6]]\n"
     ]
    }
   ],
   "source": [
    "k3 = {}\n",
    "score3 = {}\n",
    "j = 0\n",
    "for i in k:\n",
    "    NNi = KNeighborsClassifier(n_neighbors=i);\n",
    "    \n",
    "    \n",
    "    cvi_scoresC = cross_val_score(NNi, data3, target3, cv=10)\n",
    "    np.mean(cvi_scoresC)\n",
    "    \n",
    "    y_predCi = cross_val_predict(NNi, data3, target3, cv=10)\n",
    "    confusCi = confusion_matrix(target3, y_predCi)\n",
    "    \n",
    "    print('\\033[1m'+'\\033[4m')\n",
    "    print(\"Results for k={}\".format(i))\n",
    "    print('\\033[0m'+'\\033[1m')\n",
    "    print('CV Mean:')\n",
    "    print('\\033[0m')\n",
    "    print(round(np.mean(cvi_scoresC),3))\n",
    "    print('\\033[1m'+'Confusion Matrix')\n",
    "    print('\\033[0m')\n",
    "    print(confusCi)\n",
    "    k3[j] = k[j]\n",
    "    score3[j] = np.mean(cvi_scoresC)\n",
    "    j = j+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1a17bf14e0>"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from array import array\n",
    "K1 = [1,2,3,4]\n",
    "p = 0\n",
    "for keys, val in sorted(k1.items()):\n",
    "    K1[p] = k1[keys]\n",
    "    p = p +1\n",
    "\n",
    "cross1 = [1,2,3,4]\n",
    "p = 0\n",
    "for keys, val in sorted(score1.items()):\n",
    "    cross1[p] = round(score1[keys],3)\n",
    "    p = p +1\n",
    "    \n",
    "K2 = [1,2,3,4]\n",
    "p = 0\n",
    "for keys, val in sorted(k2.items()):\n",
    "    K2[p] = k2[keys]\n",
    "    p = p +1\n",
    "\n",
    "cross2 = [1,2,3,4]\n",
    "p = 0\n",
    "for keys, val in sorted(score2.items()):\n",
    "    cross2[p] = round(score2[keys],3)\n",
    "    p = p +1\n",
    "    \n",
    "K3 = [1,2,3,4]\n",
    "p = 0\n",
    "for keys, val in sorted(k3.items()):\n",
    "    K3[p] = k3[keys]\n",
    "    p = p +1\n",
    "    \n",
    "cross3 = [1,2,3,4]\n",
    "p = 0\n",
    "for keys, val in sorted(score3.items()):\n",
    "    cross3[p] = round(score3[keys],3)\n",
    "    p = p +1\n",
    "\n",
    "    \n",
    "plt.plot(K1, cross1, color = 'red', label = 'exp1a')\n",
    "plt.plot(K2, cross2, color = 'blue', label = 'exp1b')\n",
    "plt.plot(K3, cross3, color = 'yellow', label = 'exp1c')\n",
    "plt.xlabel('k-Value', fontsize = 12)\n",
    "plt.ylabel('Mean Cross-Validation Score', fontsize = 12)\n",
    "plt.title('Performance Comparison of k-NN (Unweighted)', fontsize = 14, color = 'green')\n",
    "plt.ylim((0.9,1))       \n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.1\n",
    " \n",
    "***(b) For each of the data sets, how does the 10-fold cross-validation accuracy rates and confusion matrices vary as k increases? Explain this trend***\n",
    "\n",
    "For the data set 'exp1a', it is observed from the above that the mean cross-validation score decreases while we also get less accurate confusion matrices with increasing k-value. As a result of class 1 having the same number of samples, but in a smaller region, it makes sense that we have less incorrectly predicted class 1 points (observed from confusion matrices true negative vals) than class -1. This is because class -1 points at the boundary have a higher probability of having more opposite class neighbours than class 1 points, it being a denser region. As k increases, intuitively predictions on class -1 points at the boundary becomes much less accurate. However looking at confusion matrices for k=11,21: 100% accuracy is achieved on class 1 classifications as a result of higher density class 1 points coinciding with less accurate class -1 predictions.\n",
    "\n",
    "For the data set 'exp1b', the class 1 data points have been decreased by half; leading to a less dense class 1 sample. This results in the Nearest Neighbour Classifier to interpret the boundaries less accurately, due to similar densities between classes at the boundary. However using 5-NN we in fact achieve better accuracy as a result of averaging out. This drop in class 1 density leads to higher accuracies in class -1 predictions from the exp1a case, as noise from class 1 points has less of an effect on class -1 predictions at the boundaries. For k>5 we again see an intuitive drop in accuracy.\n",
    "\n",
    "For data set 'exp1c' a similar trend to the exp1b case is observed with increasing k however the features are more exaggerated. With now only 20 data points in the class 1 sample the 1-NN classification is not very accurate, achieving only a slightly better cross-val score than the 21-NN. Similar to exp1b interms of the cross-mal mean, the 5-NN proves the most effective at classifying and it is observed that for k=5 and greater we get 100% accuracy on class -1 predictions due to the high density of the sample. However it is observed that class 1 classifications in turn suffer due to the small sample size, and with k=11,21 we actually get more incorrect than correct predictions of class 1 data points.\n",
    "\n",
    "***(c) For each k Nearest Neighbor classifier (k in {1, 5, 11, 21}), how does the 10-fold cross-validation accuracy rates and confusion matrices vary over the three data sets? Explain this trend.***\n",
    "\n",
    "Using 1-NN the best results are achieved for exp1a data followed by exp1b and exp1c respectively. This is intuitive given the decreasing sample size in this manner. For k=5, the opposite order is exhibited in terms of generalization performance with exp1c getting the best performance. As already discussed above this makes sense in terms of getting a better representation of the boundaries interpretted for each given sample. For k=11 and k=21 we have that the most accurate results occur for exp1b, exp1c having too few data points for the higher k classifiers to be effective and exp1a having more dense a population at boundaries."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.1 (d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Results for k=1 (a)\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.977\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[194   6]\n",
      " [  3 197]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=2 (a)\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.977\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[194   6]\n",
      " [  3 197]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=3 (a)\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.967\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[189  11]\n",
      " [  2 198]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=4 (a)\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.967\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[189  11]\n",
      " [  2 198]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=5 (a)\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.967\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[189  11]\n",
      " [  2 198]]\n"
     ]
    }
   ],
   "source": [
    "k1a = {}\n",
    "score1a = {}\n",
    "j = 0\n",
    "\n",
    "for i in k:\n",
    "    NNdi = KNeighborsClassifier(n_neighbors=i, weights = 'distance');\n",
    "    \n",
    "    \n",
    "    cvdi_scoresA = cross_val_score(NNdi, data1, target1, cv=10)\n",
    "    \n",
    "    y_predAdi = cross_val_predict(NNdi, data1, target1, cv=10)\n",
    "    confusAdi = confusion_matrix(target1, y_predAdi)\n",
    "    \n",
    "    \n",
    "    print('\\033[1m'+'\\033[4m')\n",
    "    print(\"Results for k={} (a)\".format(i))\n",
    "    print('\\033[0m'+'\\033[1m')\n",
    "    print('CV Mean:')\n",
    "    print('\\033[0m')\n",
    "    print(round(np.mean(cvdi_scoresA),3))\n",
    "    print('\\033[1m'+'Confusion Matrix')\n",
    "    print('\\033[0m')\n",
    "    print(confusAdi)\n",
    "    k1a[j] = k[j]\n",
    "    score1a[j] = np.mean(cvdi_scoresA)\n",
    "    j = j+1\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Results for k=1 (b)\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.96\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[193   7]\n",
      " [  5  95]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=2 (b)\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.96\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[193   7]\n",
      " [  5  95]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=3 (b)\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.97\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[195   5]\n",
      " [  4  96]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=4 (b)\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.967\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[194   6]\n",
      " [  4  96]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=5 (b)\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.97\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[195   5]\n",
      " [  4  96]]\n"
     ]
    }
   ],
   "source": [
    "k2a = {}\n",
    "score2a = {}\n",
    "j = 0\n",
    "\n",
    "for i in k:\n",
    "    NNdi = KNeighborsClassifier(n_neighbors=i, weights = 'distance');\n",
    "\n",
    "    \n",
    "    cvdi_scoresB = cross_val_score(NNdi, data2, target2, cv=10)\n",
    "    \n",
    "    y_predBdi = cross_val_predict(NNdi, data2, target2, cv=10)\n",
    "    confusBdi = confusion_matrix(target2, y_predBdi)\n",
    "    \n",
    "    print('\\033[1m'+'\\033[4m')\n",
    "    print(\"Results for k={} (b)\".format(i))\n",
    "    print('\\033[0m'+'\\033[1m')\n",
    "    print('CV Mean:')\n",
    "    print('\\033[0m')\n",
    "    print(round(np.mean(cvdi_scoresB),3))\n",
    "    print('\\033[1m'+'Confusion Matrix')\n",
    "    print('\\033[0m')\n",
    "    print(confusBdi)\n",
    "    k2a[j] = k[j]\n",
    "    score2a[j] = np.mean(cvdi_scoresB)\n",
    "    j = j+1\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Results for k=1 (c)\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.941\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[194   6]\n",
      " [  7  13]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=2 (c)\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.941\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[194   6]\n",
      " [  7  13]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=3 (c)\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.973\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[199   1]\n",
      " [  5  15]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=4 (c)\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.973\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[200   0]\n",
      " [  6  14]]\n",
      "\u001b[1m\u001b[4m\n",
      "Results for k=5 (c)\n",
      "\u001b[0m\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.977\n",
      "\u001b[1mConfusion Matrix\n",
      "\u001b[0m\n",
      "[[200   0]\n",
      " [  5  15]]\n"
     ]
    }
   ],
   "source": [
    "k3a = {}\n",
    "score3a = {}\n",
    "j = 0\n",
    "\n",
    "for i in k:\n",
    "    NNdi = KNeighborsClassifier(n_neighbors=i, weights = 'distance');\n",
    "    \n",
    "    NNdi.fit(data3, target3);\n",
    "    \n",
    "    cvdi_scoresC = cross_val_score(NNdi, data3, target3, cv=10)\n",
    "    np.mean(cvdi_scoresC)\n",
    "    \n",
    "    y_predCdi = cross_val_predict(NNdi, data3, target3, cv=10)\n",
    "    confusCdi = confusion_matrix(target3, y_predCdi)\n",
    "    \n",
    "    print('\\033[1m'+'\\033[4m')\n",
    "    print(\"Results for k={} (c)\".format(i))\n",
    "    print('\\033[0m'+'\\033[1m')\n",
    "    print('CV Mean:')\n",
    "    print('\\033[0m')\n",
    "    print(round(np.mean(cvdi_scoresC),3))\n",
    "    print('\\033[1m'+'Confusion Matrix')\n",
    "    print('\\033[0m')\n",
    "    print(confusCdi)\n",
    "    k3a[j] = k[j]\n",
    "    score3a[j] = np.mean(cvdi_scoresC)\n",
    "    j = j+1\n",
    "    \n",
    "       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1a17dd9ef0>"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from array import array\n",
    "K1a = [1,2,3,4]\n",
    "p = 0\n",
    "for keys, val in sorted(k1a.items()):\n",
    "    K1a[p] = k1a[keys]\n",
    "    p = p +1\n",
    "\n",
    "cross1a = [1,2,3,4]\n",
    "p = 0\n",
    "for keys, val in sorted(score1a.items()):\n",
    "    cross1a[p] = round(score1a[keys],3)\n",
    "    p = p +1\n",
    "    \n",
    "K2a = [1,2,3,4]\n",
    "p = 0\n",
    "for keys, val in sorted(k2a.items()):\n",
    "    K2a[p] = k2a[keys]\n",
    "    p = p +1\n",
    "\n",
    "cross2a = [1,2,3,4]\n",
    "p = 0\n",
    "for keys, val in sorted(score2a.items()):\n",
    "    cross2a[p] = round(score2a[keys],3)\n",
    "    p = p +1\n",
    "    \n",
    "K3a = [1,2,3,4]\n",
    "p = 0\n",
    "for keys, val in sorted(k3a.items()):\n",
    "    K3a[p] = k3a[keys]\n",
    "    p = p +1\n",
    "    \n",
    "cross3a = [1,2,3,4]\n",
    "p = 0\n",
    "for keys, val in sorted(score3a.items()):\n",
    "    cross3a[p] = round(score3a[keys],3)\n",
    "    p = p +1\n",
    "\n",
    "    \n",
    "plt.plot(K1a, cross1a, color = 'red', label = 'Weighted')\n",
    "plt.plot(K2a, cross2a, color = 'blue')\n",
    "plt.plot(K3a, cross3a, color = 'yellow')\n",
    "plt.plot(K1, cross1,':', color = 'red', label = 'Unweighted')\n",
    "plt.plot(K2, cross2,':', color = 'blue')\n",
    "plt.plot(K3, cross3,':', color = 'yellow')\n",
    "plt.xlabel('k-Value', fontsize = 12)\n",
    "plt.ylabel(' Mean Cross-Validation Score', fontsize = 12)\n",
    "plt.title('Performance Comparison of k-NN (Weighted Vs. Unweighted)', fontsize = 14, color = 'green')\n",
    "#plt.ylim((0,100)\n",
    "plt.ylim((0.9,1))       \n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.1 (d)\n",
    "\n",
    "***(d) Repeat (b) and (c) for the Nearest Neighbor classifier that employs distance weighting by setting option weights ='distance'. Comment on the change in the generalization performance of the classifiers from the unweighted version for the same values of k and the reason for this change.***\n",
    "\n",
    "From the Mean Cross-Validation plot of weighted values (now appearing as solid lines) vs. unweighted values (dotted) it is immediately apparent that the Neareast Neighbour classifiers achieve higher accuracies when weights are introduced in all cases higher than k=1. When implementing the 'distance' parameter, points are weighted by the inverse of their distance from the point of interest. As a result, closer neighbors of a query point will have a greater influence than neighbors which are further away. Information from respective confusion matrices also confirms that lower rates of false predictions occurs with the weighted classifier. This is intuitive, as it enables the classifier to interpret data points at the boundaries more accurately, reducing the probability of noise."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.1 (e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Decision Tree Results (a):\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.995\n",
      "\u001b[1m\n",
      "Confusion Matrix:\n",
      "\u001b[0m\n",
      "[[200   0]\n",
      " [  2 198]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn import tree\n",
    "\n",
    "DT = DecisionTreeClassifier('entropy', random_state = 0)\n",
    "\n",
    "DT.fit(data1, target1);\n",
    "\n",
    "cvi_scoresDTa = cross_val_score(DT, data1, target1, cv=10)\n",
    "np.mean(cvi_scoresDTa)\n",
    "\n",
    "y_predDTa = cross_val_predict(DT, data1, target1, cv=10)\n",
    "confusDTa = confusion_matrix(target1, y_predDTa)\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Decision Tree Results (a):')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cvi_scoresDTa),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix:')\n",
    "print('\\033[0m')\n",
    "print(confusDTa)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Decision Tree Results (b):\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.987\n",
      "\u001b[1m\n",
      "Confusion Matrix:\n",
      "\u001b[0m\n",
      "[[200   0]\n",
      " [  4  96]]\n"
     ]
    }
   ],
   "source": [
    "DT.fit(data2, target2);\n",
    "\n",
    "cv_scoresDTb = cross_val_score(DT, data2, target2, cv=10)\n",
    "np.mean(cv_scoresDTb)\n",
    "    \n",
    "y_predDTb = cross_val_predict(DT, data2, target2, cv=10)\n",
    "confusDTb = confusion_matrix(target2, y_predDTb)\n",
    "  \n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Decision Tree Results (b):')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresDTb),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix:')\n",
    "print('\\033[0m')\n",
    "print(confusDTb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Decision Tree Results (c):\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.986\n",
      "\u001b[1m\n",
      "Confusion Matrix:\n",
      "\u001b[0m\n",
      "[[200   0]\n",
      " [  3  17]]\n"
     ]
    }
   ],
   "source": [
    "cv_scoresDTc = cross_val_score(DT, data3, target3, cv=10)\n",
    "\n",
    "y_predDTc = cross_val_predict(DT, data3, target3, cv=10)\n",
    "confusDTc = confusion_matrix(target3, y_predDTc)\n",
    "\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Decision Tree Results (c):')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresDTc),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix:')\n",
    "print('\\033[0m')\n",
    "print(confusDTc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Logistic Regression Results (a):\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.522\n",
      "\u001b[1m\n",
      "Confusion Matrix:\n",
      "\u001b[0m\n",
      "[[ 99 101]\n",
      " [ 90 110]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "logreg = LogisticRegression(solver = 'lbfgs')\n",
    "\n",
    "\n",
    "cv_scoresloga = cross_val_score(logreg, data1, target1, cv=10)\n",
    "\n",
    "y_predloga = cross_val_predict(logreg, data1, target1, cv=10)\n",
    "confusloga = confusion_matrix(target1, y_predloga)\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Logistic Regression Results (a):')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresloga),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix:')\n",
    "print('\\033[0m')\n",
    "print(confusloga)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Logistic Regression Results (b):\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.667\n",
      "\u001b[1m\n",
      "Confusion Matrix:\n",
      "\u001b[0m\n",
      "[[200   0]\n",
      " [100   0]]\n"
     ]
    }
   ],
   "source": [
    "cv_scoreslogb = cross_val_score(logreg, data2, target2, cv=10)\n",
    "np.mean(cv_scoreslogb)\n",
    "\n",
    "y_predlogb = cross_val_predict(logreg, data2, target2, cv=10)\n",
    "confuslogb = confusion_matrix(target2, y_predlogb)\n",
    "    \n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Logistic Regression Results (b):')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoreslogb),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix:')\n",
    "print('\\033[0m')\n",
    "print(confuslogb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Logistic Regression Results (c):\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.909\n",
      "\u001b[1m\n",
      "Confusion Matrix:\n",
      "\u001b[0m\n",
      "[[200   0]\n",
      " [ 20   0]]\n"
     ]
    }
   ],
   "source": [
    "logreg.fit(data3, target3);\n",
    "\n",
    "\n",
    "cv_scoreslogc = cross_val_score(logreg, data3, target3, cv=10)\n",
    "np.mean(cv_scoreslogc)\n",
    "\n",
    "y_predlogc = cross_val_predict(logreg, data3, target3, cv=10)\n",
    "confuslogc = confusion_matrix(target3, y_predlogc)\n",
    "\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Logistic Regression Results (c):')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoreslogc),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix:')\n",
    "print('\\033[0m')\n",
    "print(confuslogc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## 1.1 (e) \n",
    "\n",
    "***(e) Run decision trees and logistic regression classifiers on the three data sets from the Experiment 1 cluster, and compare their generalization performance with that of the various k-NN classifiers from (b), (c), and (d). Explain the reasons for the observed differences in the generalization performance. Visualize the errors of the decision trees and logistic regression classifiers on the data sets from the Experiment 1 cluster.***\n",
    "\n",
    "It is observed that decision trees provide more accurate classification than the Nearest Neighbour classifiers for these data sets. For the exp1a data set, we obtain mean CV score of 0.995, significantly higher than the best Nearest Neighbour CV score for that data set (from the 1-NN). From the confusion matrix, it is seen that only 2 class 1 points were interpretted incorrectly as class -1 points, with no class -1 points incorrectly classified. For 1-NN we had in total 9 incorrect classifications for exp1a. For exp1b and exp1c the DT classifier is consistent in its performance, retaining mean CV scores of above 0.985. This supercedes the optimum 5-NN classifications for these two data sets.\n",
    "\n",
    "Errors in the Decision Tree classifications occur due to some points lying very close to the boundaries. They make best approximation of these class boundaries using lines, and as can be seen from the confusion matrices, they are susceptibe to a certain degree of noise. From the visualizations in 1.1 (a) candidates for these misclassified class 1 points can be easily identified (where they occur very close to multiple class -1 points)\n",
    "\n",
    "The logistic regression classifier proves to be ineffective for these data sets as a result of it being a linear classifier. For exp1a when we have equal sample sizes in both class 1 and -1, we achieve a mean CV score of 0.523, misclassifying data points almost as much as correct classifications. In this case we the regressor forms a line through the data, classifying all data points above this line as -1 and all below as +1. For exp1b and exp1c, it achieves its highest possible accuracy by classifying all points as class -1, as they are now in the majority. We can conclude that as a result of these non-linear boundaries, this classifier is not suitable for these data sets."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 1.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Decision Tree Results (c):\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "1.0\n",
      "\u001b[1m\n",
      "Confusion Matrix:\n",
      "\u001b[0m\n",
      "[[550   0]\n",
      " [  0 551]]\n"
     ]
    }
   ],
   "source": [
    "exp2a = pd.read_csv(\"exp2a.csv\")\n",
    "data2a = exp2a[['a0001','a0003','a0005','a0007']]\n",
    "target2a = exp2a['class']\n",
    "\n",
    "DT = DecisionTreeClassifier('entropy')\n",
    "\n",
    "cv_scoresDTA = cross_val_score(DT, data2a, target2a, cv=10)\n",
    "\n",
    "y_predDTA = cross_val_predict(DT, data2a, target2a, cv=10)\n",
    "confusDTA = confusion_matrix(target2a, y_predDTA)\n",
    "\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Decision Tree Results (a):')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresDTA),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix:')\n",
    "print('\\033[0m')\n",
    "print(confusDTA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "10-Nearest Neighbour Results (a):\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "1.0\n",
      "\u001b[1m\n",
      "Confusion Matrix:\n",
      "\u001b[0m\n",
      "[[550   0]\n",
      " [  0 551]]\n"
     ]
    }
   ],
   "source": [
    "NN = KNeighborsClassifier(n_neighbors=10);\n",
    "    \n",
    "   \n",
    "cv_scoresNNA = cross_val_score(NN, data2a, target2a, cv=10)\n",
    "  \n",
    "y_predNNA = cross_val_predict(NN, data2a, target2a, cv=10)\n",
    "confusNNA = confusion_matrix(target2a, y_predNNA)\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('10-Nearest Neighbour Results (a):')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresNNA),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix:')\n",
    "print('\\033[0m')\n",
    "print(confusNNA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Gaussian Naive Bayes Results (a):\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.446\n",
      "\u001b[1m\n",
      "Confusion Matrix:\n",
      "\u001b[0m\n",
      "[[245 305]\n",
      " [305 246]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "\n",
    "NB = GaussianNB()\n",
    "\n",
    "cv_scoresNBA = cross_val_score(NB, data2a, target2a, cv=10)\n",
    "\n",
    "y_predNBA = cross_val_predict(NB, data2a, target2a, cv=10)\n",
    "confusNBA = confusion_matrix(target2a, y_predNBA)\n",
    "    \n",
    "    \n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Gaussian Naive Bayes Results (a):')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresNBA),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix:')\n",
    "print('\\033[0m')\n",
    "print(confusNBA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Log Reg Results (a):\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.446\n",
      "\u001b[1m\n",
      "Confusion Matrix:\n",
      "\u001b[0m\n",
      "[[245 305]\n",
      " [305 246]]\n"
     ]
    }
   ],
   "source": [
    "cv_scoreslogA = cross_val_score(logreg, data2a, target2a, cv=10)\n",
    "\n",
    "\n",
    "y_predlogA = cross_val_predict(logreg, data2a, target2a, cv=10)\n",
    "confuslogA = confusion_matrix(target2a, y_predlogA)\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Log Reg Results (a):')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoreslogA),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix:')\n",
    "print('\\033[0m')\n",
    "print(confuslogA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "SVC Results (a)\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.546\n",
      "\u001b[1m\n",
      "Confusion Matrix:\n",
      "\u001b[0m\n",
      "[[300 250]\n",
      " [250 301]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "\n",
    "SVM = SVC(kernel = 'linear')\n",
    "\n",
    "cv_scoresSVMA = cross_val_score(SVM, data2a, target2a, cv=10)\n",
    "\n",
    "y_predSVMA = cross_val_predict(SVM, data2a, target2a, cv=10)\n",
    "confusSVMA = confusion_matrix(target2a, y_predSVMA)\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('SVC Results (a)')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresSVMA),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix:')\n",
    "print('\\033[0m')\n",
    "print(confusSVMA)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1.2 \n",
    "\n",
    "***(a) What classifiers have a bad generalization performance and what classifiers have a good generalization performance? Comment on the collective characteristics of the variables in the exp2a.csv data that lead to such performance.***\n",
    "\n",
    "It is observed that Gaussian Naive Bayes, Logistic Regression and Linear Support Vector Machines have poor generalization performance. This results from the fact that these are linear classifiers, where we are dealing with non-linear data. The Decision Tree and Nearest Neighbor classifiers have very good performance as they are good with working with these non-linear data types\n",
    "\n",
    "***(b) Can you improve the classifiers from (a) that have a bad generalization performance by changing the parameters when training those classifiers?***\n",
    "\n",
    "\n",
    "We could perhaps improve the Gaussian Naive Bayes and Logistic Regression classifiers by rearranging the confusion matrix to consider incorrectly predicted values as correctly predicted values. This is because we achieved more incorrect predictions than correct for both classifiers. In fact, we achieved the exact same CV score and confusion matrices in both. We could possible improve the results for the SVM by adjusting the kernel from linear to something non linear, to more accurately match the non-linear dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Decision Tree Results (b):\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.736\n",
      "\u001b[1m\n",
      "Confusion Matrix:\n",
      "\u001b[0m\n",
      "[[363 187]\n",
      " [107 444]]\n"
     ]
    }
   ],
   "source": [
    "exp2b = pd.read_csv(\"exp2b.csv\")\n",
    "\n",
    "data2b = exp2b.iloc[:,0:99]\n",
    "target2b = exp2b['class']\n",
    "\n",
    "cv_scoresDTB = cross_val_score(DT, data2b, target2b, cv=10)\n",
    "\n",
    "y_predDTB = cross_val_predict(DT, data2b, target2b, cv=10)\n",
    "confusDTB = confusion_matrix(target2b, y_predDTB)\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Decision Tree Results (b):')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresDTB),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix:')\n",
    "print('\\033[0m')\n",
    "print(confusDTB)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "10-Nearest Neighbour Results (b):\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.506\n",
      "\u001b[1m\n",
      "Confusion Matrix:\n",
      "\u001b[0m\n",
      "[[357 193]\n",
      " [351 200]]\n"
     ]
    }
   ],
   "source": [
    "NNB10 = KNeighborsClassifier(n_neighbors=10);\n",
    "NNB10.fit(data2b, target2b);\n",
    "    \n",
    "cv_scoresNNB10 = cross_val_score(NNB10, data2b, target2b, cv=10)\n",
    "np.mean(cv_scoresNNB10)\n",
    "    \n",
    "y_predNNB10 = cross_val_predict(NNB10, data2b, target2b, cv=10)\n",
    "confusNNB10 = confusion_matrix(target2b, y_predNNB10)\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('10-Nearest Neighbour Results (b):')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresNNB10),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix:')\n",
    "print('\\033[0m')\n",
    "print(confusNNB10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "1-Nearest Neighbour Results (b):\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.568\n",
      "\u001b[1m\n",
      "Confusion Matrix:\n",
      "\u001b[0m\n",
      "[[322 228]\n",
      " [247 304]]\n"
     ]
    }
   ],
   "source": [
    "NNB1 = KNeighborsClassifier(n_neighbors=1);\n",
    "NNB1.fit(data2b, target2b);\n",
    "    \n",
    "cv_scoresNNB1 = cross_val_score(NNB1, data2b, target2b, cv=10)\n",
    "    \n",
    "y_predNNB1 = cross_val_predict(NNB1, data2b, target2b, cv=10)\n",
    "confusNNB1 = confusion_matrix(target2b, y_predNNB1)\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('1-Nearest Neighbour Results (b):')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresNNB1),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix:')\n",
    "print('\\033[0m')\n",
    "print(confusNNB1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Gaussian Naive Bayes Results (b):\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.363\n",
      "\u001b[1m\n",
      "Confusion Matrix:\n",
      "\u001b[0m\n",
      "[[197 353]\n",
      " [348 203]]\n"
     ]
    }
   ],
   "source": [
    "cv_scoresNBB = cross_val_score(NB, data2b, target2b, cv=10)\n",
    "    \n",
    "y_predNBB = cross_val_predict(NB, data2b, target2b, cv=10)\n",
    "confusNBB = confusion_matrix(target2b, y_predNBB)\n",
    "\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Gaussian Naive Bayes Results (b):')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresNBB),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix:')\n",
    "print('\\033[0m')\n",
    "print(confusNBB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Log Reg Results (b):\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.436\n",
      "\u001b[1m\n",
      "Confusion Matrix:\n",
      "\u001b[0m\n",
      "[[242 308]\n",
      " [313 238]]\n"
     ]
    }
   ],
   "source": [
    "logregB = LogisticRegression(solver = 'liblinear')\n",
    "\n",
    "cv_scoreslogB = cross_val_score(logregB, data2b, target2b, cv=10)\n",
    "\n",
    "y_predlogB = cross_val_predict(logregB, data2b, target2b, cv=10)\n",
    "confuslogB = confusion_matrix(target2b, y_predlogB)\n",
    "\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Log Reg Results (b):')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoreslogB),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix:')\n",
    "print('\\033[0m')\n",
    "print(confuslogB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "SVC (b):\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.514\n",
      "\u001b[1m\n",
      "Confusion Matrix:\n",
      "\u001b[0m\n",
      "[[288 262]\n",
      " [273 278]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "SVM =  SVC(kernel = \"linear\", max_iter = 25000) \n",
    "\n",
    "cv_scoresSVMB = cross_val_score(SVM,data2b,target2b,cv = 10)\n",
    "\n",
    "y_predSVMB = cross_val_predict(SVM,data2b,target2b, cv = 10)\n",
    "\n",
    "confusSVMB = confusion_matrix(target2b,y_predSVMB)\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('SVC (b):')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresSVMB),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix:')\n",
    "print('\\033[0m')\n",
    "print(confusSVMB)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.2 \n",
    "\n",
    "***(c) Which classifier shows the biggest drop of the generalization performance\n",
    "compared to the exp2a.csv data, and what is the reason for this drop?***\n",
    "\n",
    "The biggest drop occurs for the Nearest Neighbour classifier (k=10), with the cross-val score decreasing by almost half (from 1 to 0.506). This is a drastic drop in generalization performance, and is due to the fact that we now have 95 additional noisy variables in the exp2b dataset than in exp2a. The k-NN classifier is more sensitive to noise and suffers more from higher dimensionality than the Decision Tree Classifier, the other successful classifier for the orginal dataset. \n",
    "\n",
    "***(d) Which classifier shows the smallest drop of the generalization performance\n",
    "compared to the exp2a.csv data, and what is the reason for this drop\n",
    "compared with the classifier identified in (c)?***\n",
    "\n",
    "The Logistic Regression classifier exhibits the lowest drop in generalization performance. This is a result of it estimates class probabilities rather than making classification decisions. Making use of probabilities these would be less affected by noise than other classifiers, although it still is not a viable classification for this non-linear data set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Assignment 1.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "Df1 = pd.read_csv('exp3a.csv')\n",
    "data3a = Df1.iloc[:,0:len(Df1.columns)-1];\n",
    "target3a = Df1['class'];\n",
    "\n",
    "Df2 = pd.read_csv('exp3b.csv')\n",
    "data3b = Df2.iloc[:,0:len(Df2.columns)-1];\n",
    "target3b = Df2['class'];\n",
    "\n",
    "Df3 = pd.read_csv('exp3c.csv')\n",
    "data3c = Df3.iloc[:,0:len(Df3.columns)-1];\n",
    "target3c = Df3['class'];\n",
    "\n",
    "Df4 = pd.read_csv('exp3d.csv')\n",
    "data3d = Df4.iloc[:,0:len(Df4.columns)-1];\n",
    "target3d = Df4['class'];\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Naive Bayes Results (exp3a)\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.959\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[473  27]\n",
      " [ 14 486]]\n",
      "\u001b[1m\u001b[4m\n",
      "Nearest Neightbour Results (exp3a)\n",
      "\u001b[0m\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 1 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.988\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[494   6]\n",
      " [  6 494]]\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 2 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.983\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[497   3]\n",
      " [ 14 486]]\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 3 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.989\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[494   6]\n",
      " [  5 495]]\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 4 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.983\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[496   4]\n",
      " [ 13 487]]\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 5 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.983\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[490  10]\n",
      " [  7 493]]\n",
      "\u001b[1m\u001b[4m\n",
      "Decision Tree Results(exp3a)\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.962\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[483  17]\n",
      " [ 16 484]]\n"
     ]
    }
   ],
   "source": [
    "cv_scoresNB3a = cross_val_score(NB,data3a,target3a,cv = 10)\n",
    "np.mean(cv_scoresNB3a)\n",
    "    \n",
    "y_predNB3a = cross_val_predict(NB, data3a, target3a, cv=10)\n",
    "confusNB3a = confusion_matrix(target3a, y_predNB3a)\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Naive Bayes Results (exp3a)')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresNB3a),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix')\n",
    "print('\\033[0m')\n",
    "print(confusNB3a)\n",
    "\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "k =  [1,2,3,4,5]\n",
    "j = 0\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Nearest Neightbour Results (exp3a)')\n",
    "print('\\033[0m')\n",
    "for i in k:\n",
    "    NN3a = KNeighborsClassifier(n_neighbors=i) \n",
    "\n",
    "  \n",
    "    cv_scoresNN3ai = cross_val_score(NN3a,data3a,target3a,cv = 10)\n",
    "    \n",
    "    y_predNN3ai = cross_val_predict(NN3a, data3a, target3a, cv=10)\n",
    "    confusNN3ai = confusion_matrix(target3a, y_predNN3ai)\n",
    "    \n",
    "    print('\\033[1m'+'\\033[4m')\n",
    "    print(\"results for k = {} \".format(i))\n",
    "    print('\\033[0m')\n",
    "    print('\\033[1m')\n",
    "    print('CV Mean:')\n",
    "    print('\\033[0m')\n",
    "    print(round(np.mean(cv_scoresNN3ai),3))\n",
    "    print('\\033[1m')\n",
    "    print('Confusion Matrix')\n",
    "    print('\\033[0m')\n",
    "    print(confusNN3ai)\n",
    "   \n",
    "\n",
    "\n",
    "cv_scoresDT3a = cross_val_score(DT,data3a,target3a,cv = 10)\n",
    "np.mean(cv_scoresDT3a)\n",
    "    \n",
    "y_predDT3a = cross_val_predict(DT, data3a, target3a, cv=10)\n",
    "confusDT3a = confusion_matrix(target3a, y_predDT3a)\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Decision Tree Results(exp3a)')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresDT3a),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix')\n",
    "print('\\033[0m')\n",
    "print(confusDT3a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Naive Bayes Results (exp3b)\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.959\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[483  17]\n",
      " [ 24 476]]\n",
      "\u001b[1m\u001b[4m\n",
      "Nearest Neightbour Results (exp3b)\n",
      "\u001b[0m\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 1 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.808\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[403  97]\n",
      " [ 95 405]]\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 2 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.8019999999999999\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[467  33]\n",
      " [165 335]]\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 3 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.835\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[419  81]\n",
      " [ 84 416]]\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 4 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.8320000000000001\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[461  39]\n",
      " [129 371]]\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 5 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.8550000000000001\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[430  70]\n",
      " [ 75 425]]\n",
      "\u001b[1m\u001b[4m\n",
      "Decision Tree Results(exp3b)\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.755\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[378 122]\n",
      " [131 369]]\n"
     ]
    }
   ],
   "source": [
    "cv_scoresNB3b = cross_val_score(NB,data3b,target3b,cv = 10)\n",
    "np.mean(cv_scoresNB3b)\n",
    "    \n",
    "y_predNB3b = cross_val_predict(NB, data3b, target3b, cv=10)\n",
    "confusNB3b = confusion_matrix(target3b, y_predNB3b)\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Naive Bayes Results (exp3b)')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresNB3b),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix')\n",
    "print('\\033[0m')\n",
    "print(confusNB3b)\n",
    "\n",
    " \n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "k =  [1,2,3,4,5]\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Nearest Neightbour Results (exp3b)')\n",
    "print('\\033[0m')\n",
    "for i in k:\n",
    "    NN3b = KNeighborsClassifier(n_neighbors=i) \n",
    "\n",
    "    cv_scoresNN3bi = cross_val_score(NN3b,data3b,target3b,cv = 10)\n",
    "    np.mean(cv_scoresNN3bi)\n",
    "    \n",
    "    y_predNN3bi = cross_val_predict(NN3b, data3b, target3b, cv=10)\n",
    "    confusNN3bi = confusion_matrix(target3b, y_predNN3bi)\n",
    "    \n",
    "    \n",
    "    print('\\033[1m'+'\\033[4m')\n",
    "    print(\"results for k = {} \".format(i))\n",
    "    print('\\033[0m')\n",
    "    print('\\033[1m')\n",
    "    print('CV Mean:')\n",
    "    print('\\033[0m')\n",
    "    print(np.mean(cv_scoresNN3bi))\n",
    "    print('\\033[1m')\n",
    "    print('Confusion Matrix')\n",
    "    print('\\033[0m')\n",
    "    print(confusNN3bi)\n",
    "   \n",
    "\n",
    "\n",
    "cv_scoresDT3b = cross_val_score(DT,data3b,target3b,cv = 10)\n",
    "\n",
    "y_predDT3b = cross_val_predict(DT, data3b, target3b, cv=10)\n",
    "confusDT3b = confusion_matrix(target3b, y_predDT3b)\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Decision Tree Results(exp3b)')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresDT3b),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix')\n",
    "print('\\033[0m')\n",
    "print(confusDT3b)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Naive Bayes Results (exp3c)\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.922\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[463  37]\n",
      " [ 41 459]]\n",
      "\u001b[1m\u001b[4m\n",
      "Nearest Neightbour Results (exp3c)\n",
      "\u001b[0m\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 1 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.73\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[384 116]\n",
      " [154 346]]\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 2 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.709\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[453  47]\n",
      " [244 256]]\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 3 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.766\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[395 105]\n",
      " [129 371]]\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 4 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.767\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[455  45]\n",
      " [188 312]]\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 5 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.799\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[412  88]\n",
      " [113 387]]\n",
      "\u001b[1m\u001b[4m\n",
      "Decision Tree Results(exp3c)\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.629\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[318 182]\n",
      " [185 315]]\n"
     ]
    }
   ],
   "source": [
    "cv_scoresNB3c = cross_val_score(NB,data3c,target3c,cv = 10)\n",
    "np.mean(cv_scoresNB3a)\n",
    "    \n",
    "y_predNB3c = cross_val_predict(NB, data3c, target3c, cv=10)\n",
    "confusNB3c = confusion_matrix(target3c, y_predNB3c)\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Naive Bayes Results (exp3c)')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresNB3c),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix')\n",
    "print('\\033[0m')\n",
    "print(confusNB3c)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "k =  [1,2,3,4,5]\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Nearest Neightbour Results (exp3c)')\n",
    "print('\\033[0m')\n",
    "for i in k:\n",
    "    NN3c = KNeighborsClassifier(n_neighbors=i) \n",
    "\n",
    "    \n",
    "\n",
    "   \n",
    "    cv_scoresNN3ci = cross_val_score(NN3c,data3c,target3c,cv = 10)\n",
    "    np.mean(cv_scoresNN3ci)\n",
    "    \n",
    "    y_predNN3ci = cross_val_predict(NN3c, data3c, target3c, cv=10)\n",
    "    confusNN3ci = confusion_matrix(target3c, y_predNN3ci)\n",
    "    \n",
    "    \n",
    "    print('\\033[1m'+'\\033[4m')\n",
    "    print(\"results for k = {} \".format(i))\n",
    "    print('\\033[0m')\n",
    "    print('\\033[1m')\n",
    "    print('CV Mean:')\n",
    "    print('\\033[0m')\n",
    "    print(round(np.mean(cv_scoresNN3ci),3))\n",
    "    print('\\033[1m')\n",
    "    print('Confusion Matrix')\n",
    "    print('\\033[0m')\n",
    "    print(confusNN3ci)\n",
    "   \n",
    "\n",
    "\n",
    "cv_scoresDT3c = cross_val_score(DT,data3c,target3c,cv = 10)\n",
    "\n",
    "    \n",
    "y_predDT3c = cross_val_predict(DT, data3c, target3c, cv=10)\n",
    "confusDT3c = confusion_matrix(target3c, y_predDT3c)\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Decision Tree Results(exp3c)')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresDT3c),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix')\n",
    "print('\\033[0m')\n",
    "print(confusDT3c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[4m\n",
      "Naive Bayes Results (exp3d)\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.89\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[447  53]\n",
      " [ 57 443]]\n",
      "\u001b[1m\u001b[4m\n",
      "Nearest Neightbour Results (exp3d)\n",
      "\u001b[0m\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 1 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.6340000000000001\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[319 181]\n",
      " [185 315]]\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 2 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.636\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[434  66]\n",
      " [298 202]]\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 3 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.674\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[338 162]\n",
      " [164 336]]\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 4 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.6689999999999999\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[422  78]\n",
      " [253 247]]\n",
      "\u001b[1m\u001b[4m\n",
      "results for k = 5 \n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.7150000000000001\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[364 136]\n",
      " [149 351]]\n",
      "\u001b[1m\u001b[4m\n",
      "Decision Tree Results(exp3d)\n",
      "\u001b[0m\n",
      "\u001b[1m\n",
      "CV Mean:\n",
      "\u001b[0m\n",
      "0.556\n",
      "\u001b[1m\n",
      "Confusion Matrix\n",
      "\u001b[0m\n",
      "[[262 238]\n",
      " [209 291]]\n"
     ]
    }
   ],
   "source": [
    "cv_scoresNB3d = cross_val_score(NB,data3d,target3d,cv = 10)\n",
    "\n",
    "y_predNB3d = cross_val_predict(NB, data3d, target3d, cv=10)\n",
    "confusNB3d = confusion_matrix(target3d, y_predNB3d)\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Naive Bayes Results (exp3d)')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresNB3d),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix')\n",
    "print('\\033[0m')\n",
    "print(confusNB3d)\n",
    "\n",
    "\n",
    "\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "k =  [1,2,3,4,5]\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Nearest Neightbour Results (exp3d)')\n",
    "print('\\033[0m')\n",
    "for i in k:\n",
    "    NN3d = KNeighborsClassifier(n_neighbors=i) \n",
    "\n",
    "    cv_scoresNN3di = cross_val_score(NN3d,data3d,target3d,cv = 10)\n",
    "    \n",
    "    y_predNN3di = cross_val_predict(NN3d, data3d, target3d, cv=10)\n",
    "    confusNN3di = confusion_matrix(target3d, y_predNN3di)\n",
    "    \n",
    "    \n",
    "    print('\\033[1m'+'\\033[4m')\n",
    "    print(\"results for k = {} \".format(i))\n",
    "    print('\\033[0m')\n",
    "    print('\\033[1m')\n",
    "    print('CV Mean:')\n",
    "    print('\\033[0m')\n",
    "    print(round(np.mean(cv_scoresNN3di),3))\n",
    "    print('\\033[1m')\n",
    "    print('Confusion Matrix')\n",
    "    print('\\033[0m')\n",
    "    print(confusNN3di)\n",
    "   \n",
    "\n",
    "\n",
    "cv_scoresDT3d = cross_val_score(DT,data3d,target3d,cv = 10)\n",
    "  \n",
    "y_predDT3d = cross_val_predict(DT, data3d, target3d, cv=10)\n",
    "confusDT3d = confusion_matrix(target3d, y_predDT3d)\n",
    "\n",
    "print('\\033[1m'+'\\033[4m')\n",
    "print('Decision Tree Results(exp3d)')\n",
    "print('\\033[0m')\n",
    "print('\\033[1m')\n",
    "print('CV Mean:')\n",
    "print('\\033[0m')\n",
    "print(round(np.mean(cv_scoresDT3d),3))\n",
    "print('\\033[1m')\n",
    "print('Confusion Matrix')\n",
    "print('\\033[0m')\n",
    "print(confusDT3d)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.3\n",
    "\n",
    "***(a) How does the performance of the different classifiers compare for each dataset?***\n",
    "\n",
    "For exp1a we have that the kNN (k=3) classifier provides the most accurate results with the other kNN also providing accurate predictions. This is followed by Decision Tree and then by Gaussian Naive Bayes, with all classifiers achieving a solid CV score of greater than 0.95. For exp3b, now working with ten variables as opposed to two we now have that the Naive Bayes classifier achieves the best accuracy and in fact retains its CV score from exp1a of 0.959. Interestingly, the confusion matrix is very similar with the same number of True and False predictions, only that the repective True and False predictions have swapped places. This significantly out-performs the other classifiers, the best kNN (k=5) achieving 0.855 and Decision Tree achieving 0.755. A similar trend is observed for both exp3c and exp3d with Naive Bayes retaining quite a high generalization perfomance (CV scores 0.922 and 0.89 respectively) while the kNN and Decision Tree classifier errors are more extreme with higher dimensionality.\n",
    "\n",
    "\n",
    "\n",
    "***(b) How does the performance of each classifier vary as the number of variables is increased from datasets exp3a.csv to exp3d.csv? Which properties of the classifiers lead to such a variation in performance?***\n",
    "\n",
    "It is apparent that the performance of all classifiers used in this assignment decreases as we move to datasets with more variables. It can be concluded from this experiment that the higher number of variables leads to more complexity in terms of classifications, and leads to 'the curse of dimensionality', albeit certain classifiers suffer more than others. The most consistent classifier throughout the datasets is the Naive Bayes classifier. Even when tasked with very high dimensionality of 50 variables in exp3d, a CV score of 0.89 is still achieved. This is likely as a result of the fact that Naive Bayes does not employ a search in the hypothesis but rather just multiplies probability estimates. This simple framework gives consistent results for data of this type. \n",
    "\n",
    "The k-NN classifier performs very well for exp2a when only considering 2 variables. Due to the dense data sample, kNN(k=3) is the optimum classifier, achieving better results than k=1,2 which is ultimately a consequence of the distribution of data near the border. However it is observed that when we move to higher dimensionality for the other data sets, the k=5 Nearest Neighbour seems to perform the best, providing a better search to match the higher number of dimensions. In any case the nearest neighbor search algorithm implemented by kNN suffers with increased dimensionality as the number of distance computations needed during searching increases with dimensionality of the data points.\n",
    "\n",
    "Initially for exp1a the Decision Tree Classifier performs very well, achieving performance close to kNN (CV score 0.964). However this classifier suffers the largest drop in generalization performance as we increase the number of variables. This results from the fact that the depth of the tree grows linearly with the number of variables, but the number of branches grows exponentially with the number of states. As we have a very large number of states in these samples, with higher dimensionality the decision tree struggles to learn accurate rules from the data. Also the error involved at making classifications In the most extreme of exp1d it proves to be a very unsuccessful classifier with CV score of 0.564. We can conclude that for higher dimensions the Decision Tree suffers the most from higher dimensionality\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
